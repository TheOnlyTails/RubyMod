import net.minecraftforge.gradle.common.util.ModConfig
import net.minecraftforge.gradle.common.util.RunConfig
import net.minecraftforge.gradle.userdev.DependencyManagementExtension
import net.minecraftforge.gradle.userdev.UserDevExtension
import java.time.Instant
import java.time.format.DateTimeFormatter

buildscript {
	repositories {
		maven { url = uri("https://files.minecraftforge.net/maven") }
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath(group = "net.minecraftforge.gradle", name = "ForgeGradle", version = "4.1.+")
	}
}

plugins {
	idea
	kotlin("jvm") version "1.5.0"
}
apply(plugin = "net.minecraftforge.gradle")

// Config -> Minecraft
val forgeVersion: String by extra
val minecraftVersion: String by extra
val lootTablesVersion: String by extra

// Config -> Mod
val modId: String by extra
val modVersion: String by extra

// Default Mod Information
version = modVersion
group = "com.theonlytails.rubymod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
base.archivesBaseName = "rubymod"

// Sets the toolchain to compile against OpenJDK 8
java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(8))
		vendor.set(JvmVendorSpec.ADOPTOPENJDK)
	}
}

configure<UserDevExtension> {
	// The mappings can be changed at any time, and must be in the following format.
	// snapshot_YYYYMMDD   Snapshot are built nightly.
	// stable_#            Stables are built at the discretion of the MCP team.
	// Use non-default mappings at your own risk. they may not always work.
	// Simply re-run your setup task after changing the mappings to update your workspace.
	mappings("official", minecraftVersion)

	// Exposes fields, methods, constructors, and classes for use within the mod.
	// Uncomment this to enable.
	accessTransformer(file("src/main/resources/META-INF/accesstransformer.cfg"))

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs(closureOf<NamedDomainObjectContainer<RunConfig>> {
		create("client") {
			workingDirectory(file("run"))

			taskName("client")

			// Recommended logging data for a userdev environment
			property("forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP")

			// Recommended logging level for the console
			property("forge.logging.console.level", "debug")

			mods(closureOf<NamedDomainObjectContainer<ModConfig>> {
				create(modId) {
					source(sourceSets["main"])
				}
			})
		}

		create("server") {
			workingDirectory(file("run"))

			taskName("server")
			// Recommended logging data for a userdev environment
			property("forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP")

			// Recommended logging level for the console
			property("forge.logging.console.level", "debug")

			mods(closureOf<NamedDomainObjectContainer<ModConfig>> {
				create(modId) {
					source(sourceSets["main"])
				}
			})
		}

		create("data") {
			workingDirectory(file("run"))

			taskName("datagen")

			// Recommended logging data for a userdev environment
			property("forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP")

			// Recommended logging level for the console
			property("forge.logging.console.level", "debug")

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args(
				"--mod",
				modId,
				"--all",
				"--output",
				file("src/generated/resources/"),
				"--existing",
				file("src/main/resources/")
			)

			mods(closureOf<NamedDomainObjectContainer<ModConfig>> {
				create(modId) {
					source(sourceSets["main"])
				}
			})
		}
	})
}

// Include resources generated by data generators
sourceSets["main"].resources { srcDir("src/generated/resources") }

dependencies {
	// Specify the version of Minecraft to use, If this is any group other then "net.minecraft" it is assumed
	// that the dep is a ForgeGradle "patcher" dependency. And it's patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	"minecraft"(group = "net.minecraftforge", name = "forge", version = "$minecraftVersion-$forgeVersion")

	// Specify that the standard library of Kotlin that should be used to compile
	implementation(group = "thedarkcolour", name = "kotlinforforge", version = "1.12.0")

	implementation(
		project.the<DependencyManagementExtension>()
			.deobf(project.dependencies.create(
				group = "com.theonlytails", name = "loottables", version = lootTablesVersion
			).apply { isTransitive = false })
	)
}

// Repositories to add Kotlin
repositories {
	mavenCentral()
	maven {
		name = "Kotlin for Forge"
		url = uri("https://thedarkcolour.github.io/KotlinForForge/")
	}
}

tasks {
	named<Jar>("jar") {
		// Example for how to set properties within the manifest for reading by runtime
		manifest {
			attributes(
				"Specification-Title" to "RubyMod",
				"Specification-Vendor" to "TheOnlyTails",
				"Specification-Version" to project.version,
				"Implementation-Title" to "RubyMod",
				"Implementation-Vendor" to "TheOnlyTails",
				"Implementation-Version" to project.version,
				"Implementation-Timestamp" to DateTimeFormatter.ISO_INSTANT.format(Instant.now())
			)
		}

		// This is the preferred method to reobfuscate your jar file
		finalizedBy("reobfJar")
	}
}